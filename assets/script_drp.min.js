/*
 * © 2025 Darpan Adhikari. All rights reserved.
 *
 * This software is copyrighted and may not be copied,
 * sold, redistributed, or reused in part or full without explicit written permission.
 *
 * Any attempt to replicate or misuse this code without permission is strictly prohibited.
 */

import{auth,db,loginEmail,registerEmail,logout,resetPassword,onAuthStateChanged,getCurrentUserEmail,toastMsg}from './auth_drp.min.js';import{doc,getDoc,setDoc,updateDoc,onSnapshot,deleteField}from "https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore.js";const firebaseAuthContainer=document.getElementById('firebaseAuthContainer');const emailInput=document.getElementById('emailInput');const passwordInput=document.getElementById('passwordInput');const loginBtn=document.getElementById('loginBtn');const registerBtn=document.getElementById('registerBtn');const logoutBtn=document.getElementById('logoutBtn');const resetBtn=document.getElementById('resetBtn');const appContent=document.getElementById('appContent');const datePicker=document.getElementById('datePicker');const filterDate=document.getElementById('filterDate');const dateRangeFrom=document.getElementById('dateRangeFrom');const dateRangeTo=document.getElementById('dateRangeTo');const rangeBtn=document.getElementById('rangeBtn');const rangeModal=document.getElementById('rangeModal');const closeRange=document.getElementById('closeRange');const modalTitle=document.getElementById('modalTitle');const modalBody=document.getElementById('modalBody');const dateContainer=document.getElementById('dateContainer');const totalHoursEl=document.getElementById('totalHours');async function assign_email(){const email=await getCurrentUserEmail();if(email){document.getElementById('welcome-banner').innerHTML=`Welcome<strong>${email.split('@')[0]}</strong>`;}}assign_email();let uid=null;let unsubUser=null;const state={storage:{},ongoing:{}};function show(el){el.classList.remove('hidden');}function hide(el){el.classList.add('hidden');}function showAuth(){show(firebaseAuthContainer);hide(appContent);}function showApp(){hide(firebaseAuthContainer);show(appContent);}const userRef=()=>doc(db,'users',uid);async function pullUserDoc(){const snap=await getDoc(userRef());if(!snap.exists()){await setDoc(userRef(),{storage:{},ongoing:{}},{merge:true});return{storage:{},ongoing:{}};}return snap.data();}async function pushStorage(){const ref=userRef();const snap=await getDoc(ref);const currentStorage=snap.exists()?snap.data().storage||{}:{};const newStorage={...currentStorage,...state.storage};await setDoc(ref,{storage:newStorage},{merge:true});}async function setOngoing(date,value){state.ongoing[date]=value;await updateDoc(userRef(),{[`ongoing.${date}`]:value});}async function clearOngoing(date){delete state.ongoing[date];await updateDoc(userRef(),{[`ongoing.${date}`]:null});}function ensureDay(dateStr){const monthKey=dateStr.slice(0,7);state.storage[monthKey]=state.storage[monthKey]||{};state.storage[monthKey][dateStr]=state.storage[monthKey][dateStr]||[];}async function addDateEntry(dateStr){ensureDay(dateStr);await pushStorage();renderAll();}async function saveTimeEntry(date,inTime,outTime){ensureDay(date);const monthKey=date.slice(0,7);const inDate=new Date(`2000-01-01T${inTime}`);let outDate=new Date(`2000-01-01T${outTime}`);if(outDate<=inDate)outDate.setDate(outDate.getDate()+1);const diff=(outDate-inDate)/60000;if(diff<=0)return;state.storage[monthKey][date].push({inTime,outTime});await pushStorage();renderAll();}async function deleteTimeEntry(month,date,index){if(!state.storage[month]||!state.storage[month][date])return;state.storage[month][date].splice(index,1);if(state.storage[month][date].length===0)delete state.storage[month][date];if(Object.keys(state.storage[month]).length===0)delete state.storage[month];const path=`storage.${month}.${date}`;const updatedArray=state.storage[month]?.[date]||null;await updateDoc(userRef(),{[path]:updatedArray?updatedArray:deleteField()});renderAll();}async function deleteWholeDay(month,date){if(state.storage[month]){delete state.storage[month][date];if(Object.keys(state.storage[month]).length===0)delete state.storage[month];}if(state.ongoing[date])delete state.ongoing[date];await updateDoc(userRef(),{[`storage.${month}.${date}`]:deleteField(),[`ongoing.${date}`]:deleteField()});renderAll();}async function deleteWholeMonth(month){if(state.storage[month]){delete state.storage[month];}const ongoingKeysToDelete=[];for(let date in state.ongoing){if(date.startsWith(`${month}-`))ongoingKeysToDelete.push(date);}ongoingKeysToDelete.forEach(date=>delete state.ongoing[date]);const updates={[`storage.${month}`]:deleteField()};ongoingKeysToDelete.forEach(date=>{updates[`ongoing.${date}`]=deleteField();});await updateDoc(userRef(),updates);renderAll();}async function deleteDateOrMonth(key){const snap=await getDoc(userRef());if(!snap.exists())return;const data=snap.data();const updates={};if(/^\d{4}-\d{2}-\d{2}$/.test(key)){const [year,month,day]=key.split("-");const monthKey=`${year}-${month}`;if(data.storage?.[monthKey]?.[key]){updates[`storage.${monthKey}.${key}`]=deleteField();}if(data.ongoing?.[key]){updates[`ongoing.${key}`]=deleteField();}}else if(/^\d{4}-\d{2}$/.test(key)){if(data.storage?.[key]){updates[`storage.${key}`]=deleteField();}}if(Object.keys(updates).length>0){await updateDoc(userRef(),updates);if(key.length===7)delete state.storage[key];if(key.length===10){const [year,month]=key.split("-");if(state.storage[`${year}-${month}`])delete state.storage[`${year}-${month}`][key];if(state.ongoing[key])delete state.ongoing[key];}}}function openDeleteDay(month,date){modalTitle.textContent='Delete Entry';modalBody.innerHTML=`<p>Do you want to delete the entire<b>${date}</b>entry or just its start time?</p><div class="flex"><button id="btnDelDay" class="danger" style="padding:8px 12px;border:none;border-radius:10px">Delete Day</button><button id="btnDelStart" style="padding:8px 12px;border:1px solid #2a2f4a;border-radius:10px;background:#121528;color:#e8ecf3">Delete Start Time</button></div>`;rangeModal.classList.add('show');document.getElementById('btnDelDay').onclick=async()=>{await deleteWholeDay(month,date);rangeModal.classList.remove('show');};document.getElementById('btnDelStart').onclick=async()=>{await clearOngoing(date);rangeModal.classList.remove('show');renderAll();};}[dateRangeFrom,dateRangeTo].forEach(el=>{el.addEventListener('change',()=>{if(dateRangeFrom.value && dateRangeTo.value){const dateEntries=document.querySelectorAll(".date-entry");const from=new Date(dateRangeFrom.value).getTime();const to=new Date(dateRangeTo.value).getTime();dateEntries.forEach(entr=>{let text=entr.querySelector('.date-header strong').textContent.trim();let headerDate=new Date(text).getTime();entr.style.display=(headerDate>=from && headerDate<=to)?'block':'none';});}});});renderAll();async function renderAll(){dateContainer.innerHTML='';const today=new Date().toISOString().slice(0,10);let totalMinutes=0;const months=Object.keys(state.storage).sort();filterDate.innerHTML='<option value="all">— Filter By Month —</option>';months.forEach(m=>{const o=document.createElement('option');o.value=m;o.textContent=m;filterDate.appendChild(o);});filterDate.onchange=()=>{const target=document.getElementById(filterDate.value);if(target)target.scrollIntoView({behavior:'smooth'});};for(const month of months){let monthMinutes=0;const monthDiv=document.createElement('div');monthDiv.className='month-group';monthDiv.innerHTML=`<div class='month-title' id='${month}'><span>--------------${month}--------------</span><button class="delete" data-month="${month}">🗑 Delete Month</button></div>`;const grid=document.createElement('div');grid.className='date-grid';const dates=Object.keys(state.storage[month]||{}).sort();for(const date of dates){let dateMinutes=0;const dateDiv=document.createElement('div');dateDiv.className='date-entry';if(date===today){dateDiv.style.border='1px solid #2a2f4a';dateDiv.style.background='lightgreen';}const header=`<div class='date-header'><strong>${date}</strong><div class='btn-group'><button class="delete" data-del='${month}|${date}'>🗑</button></div></div>`;const timeEntries=document.createElement('div');timeEntries.className='time-entries';const ongoing=state.ongoing[date]||null;const wrap=document.createElement('div');wrap.className='time-entry';const inInput=document.createElement('input');inInput.type='time';inInput.value=ongoing?.inTime||'';const outInput=document.createElement('input');outInput.type='time';outInput.disabled=!ongoing;wrap.appendChild(inInput);wrap.appendChild(outInput);timeEntries.appendChild(wrap);if(ongoing && ongoing.timestamp<Date.now()){const live=document.createElement('div');live.className='live-timer';const tick=()=>{const elapsed=Math.floor((Date.now()-ongoing.timestamp)/ 60000);const h=String(Math.floor(elapsed / 60)).padStart(2,'0');const m=String(elapsed % 60).padStart(2,'0');live.textContent=`🟢 ${h}:${m}`;};tick();setInterval(tick,60000);wrap.appendChild(live);}inInput.onchange=async()=>{const ts=new Date(`${date}T${inInput.value}`).getTime();await setOngoing(date,{inTime:inInput.value,timestamp:ts});outInput.disabled=false;};outInput.onchange=async()=>{if(!outInput.value)return;await saveTimeEntry(date,inInput.value,outInput.value);await clearOngoing(date);renderDay(month,date);};const entries=Array.isArray(state.storage[month][date])?state.storage[month][date]:[];entries.forEach((entry,i)=>{const{inTime,outTime}=entry;const inD=new Date(`2000-01-01T${inTime}`);let outD=new Date(`2000-01-01T${outTime}`);if(outD<=inD)outD.setDate(outD.getDate()+1);const diff=(outD-inD)/ 60000;if(diff>0){dateMinutes+=diff;monthMinutes+=diff;totalMinutes+=diff;const row=document.createElement('div');row.className='time-entry';row.innerHTML=`<span><i class="in"></i>${inTime}|<i class="out"></i>${outTime}|<i class="diff"></i>${Math.floor(diff / 60)}h ${diff % 60}m<button class="delete" data-delrow='${month}|${date}|${i}'>×</button></span>`;timeEntries.appendChild(row);}});const summary=document.createElement('div');summary.className='summary';summary.textContent=`Day Total:${Math.floor(dateMinutes / 60)}h ${dateMinutes % 60}m`;dateDiv.innerHTML=header;dateDiv.appendChild(timeEntries);dateDiv.appendChild(summary);grid.appendChild(dateDiv);}const monthSummary=document.createElement('div');monthSummary.className='summary';monthSummary.textContent=`Month Total:${Math.floor(monthMinutes / 60)}h ${monthMinutes % 60}m`;monthDiv.appendChild(grid);monthDiv.appendChild(monthSummary);dateContainer.appendChild(monthDiv);}totalHoursEl.textContent=`Total Hours:${Math.floor(totalMinutes / 60)}h ${totalMinutes % 60}m`;}function renderDay(month,date){const dayDiv=document.getElementById(`day-${month}-${date}`);if(!dayDiv)return;}dateContainer.addEventListener('click',async(e)=>{const monthBtn=e.target.closest('button[data-month]');if(monthBtn){e.stopPropagation();const month=monthBtn.dataset.month;if(confirm(`Are you sure you want to delete ${month}?`)){await deleteWholeMonth(month);renderAll();}return;}const dayBtn=e.target.closest('button[data-del]');if(dayBtn){e.stopPropagation();const [m,d]=dayBtn.dataset.del.split('|');openDeleteDay(m,d);return;}const rowBtn=e.target.closest('button[data-delrow]');if(rowBtn){e.stopPropagation();const [m,d,i]=rowBtn.dataset.delrow.split('|');await deleteTimeEntry(m,d,Number(i));renderAll();return;}});let calculatedEntries=[];let fromGlobal='';let salaryGlobal=0;let toGlobal='';let csvContent='';function openRangeModal(){modalTitle.textContent='Calculate Time Range';modalBody.innerHTML=`<div class="grid"><label>From:<input type="date" id="fromDate" /></label><label>To:<input type="date" id="toDate" /></label></div><div class="grid"><label>Work Hour/Day:<input type="number" id="workHourInput" value="8" min="1" max="24" /></label><label>Paid Leave:<input type="number" id="holidayInput" value="1" /></label></div><label>Monthly Salary:<input type="number" id="monSalaryInput" value="0" /></label><div class="flex"><label><input type='checkbox' id='weekendSaturday' style="accent-color:red;" checked />Saturday</label><label><input type='checkbox' id='weekendSunday' style="accent-color:red;" />Sunday</label></div><div class="flex"><button id='calcBtn' class='primary' style='padding:8px 12px;border:none;border-radius:10px'>Calculate</button><button id='showTableBtn' style='display:none;padding:8px 12px;border:1px solid #2a2f4a;border-radius:10px;background:#121528;color:#e8ecf3'>Show Table</button></div><div id='rangeResult' style='font-weight:600;margin-top:8px'></div>`;rangeModal.classList.add('show');document.getElementById('calcBtn').onclick=calculateRange;document.getElementById('showTableBtn').onclick=displayRangeTable;}function closeRangeModal(){rangeModal.classList.remove('show');}function collectEntriesBetween(from,to){const results=[];for(const month of Object.keys(state.storage||{})){for(const date of Object.keys(state.storage[month]||{})){if(date>=from && date<=to){const rows=state.storage[month][date]||[];rows.forEach(({inTime,outTime})=>results.push({date,inTime,outTime}));}}}results.sort((a,b)=>a.date.localeCompare(b.date)||a.inTime.localeCompare(b.inTime));return results;}function calculateRange(){fromGlobal=document.getElementById('fromDate').value;toGlobal=document.getElementById('toDate').value;salaryGlobal=parseFloat(document.getElementById('monSalaryInput').value);let holidays=parseFloat(document.getElementById('holidayInput').value)||0;const workHoursPerDay=parseFloat(document.getElementById('workHourInput')?.value||'8');const weekendSaturday=document.getElementById('weekendSaturday')?.checked;const weekendSunday=document.getElementById('weekendSunday')?.checked;if(!fromGlobal||!toGlobal||fromGlobal>toGlobal){toastMsg('Select valid date range');return;}calculatedEntries=collectEntriesBetween(fromGlobal,toGlobal);let total=0;for(const{inTime,outTime}of calculatedEntries){let a=new Date(`2000-01-01T${inTime}`);let b=new Date(`2000-01-01T${outTime}`);if(b<=a)b.setDate(b.getDate()+1);const d=(b-a)/ 60000;if(d>0)total+=d;}const hrs=Math.floor(total / 60),min=Math.round(total % 60);if(!isNaN(salaryGlobal)&& salaryGlobal>0){let workingDaysPerMonth=30;if(weekendSaturday && weekendSunday)workingDaysPerMonth=22;else if(weekendSaturday||weekendSunday)workingDaysPerMonth=26;let effectiveWorkingDays=workingDaysPerMonth-holidays;if(effectiveWorkingDays<0.1)effectiveWorkingDays=0.1;const totalMinutesPerMonth=effectiveWorkingDays * workHoursPerDay * 60;const perMinuteRate=salaryGlobal / totalMinutesPerMonth;const earnedSalary=total * perMinuteRate;document.getElementById('rangeResult').textContent=`Total:${hrs}h ${min}m|Salary:${formatNepaliNumber(earnedSalary)}(Holidays:${holidays})`;salaryGlobal=formatNepaliNumber(earnedSalary);}else{document.getElementById('rangeResult').textContent=`Total:${hrs}h ${min}m`;}document.getElementById('showTableBtn').style.display='inline-block';}function formatNepaliNumber(num){const [integerPart,decimalPart]=num.toFixed(2).split('.');let lastThree=integerPart.slice(-3);let otherDigits=integerPart.slice(0,-3);if(otherDigits!==''){lastThree=','+lastThree;otherDigits=otherDigits.replace(/\B(?=(\d{2})+(?!\d))/g,",");}return otherDigits+lastThree+'.'+decimalPart;}function displayRangeTable(){const workHoursPerDay=parseFloat(document.getElementById('workHourInput')?.value||'8');const sat=document.getElementById('weekendSaturday')?.checked;const sun=document.getElementById('weekendSunday')?.checked;const weekend=[];if(sat)weekend.push(6);if(sun)weekend.push(0);const grouped={};calculatedEntries.forEach(e=>{(grouped[e.date]||=[]).push(e);});let html=`<table><thead><tr><th>Date</th><th>In</th><th>Out</th><th>Duration</th></tr></thead><tbody>`;let totalMin=0;const workedDates=new Set();csvContent='Date,In Time,Out Time,Duration(hrs)\n';for(const date of Object.keys(grouped)){const rows=grouped[date];const rowspan=rows.length;const dow=new Date(date).getDay();const isW=weekend.includes(dow);rows.forEach((r,i)=>{let a=new Date(`2000-01-01T${r.inTime}`);let b=new Date(`2000-01-01T${r.outTime}`);if(b<=a)b.setDate(b.getDate()+1);const d=(b-a)/60000;if(d>0){totalMin+=d;workedDates.add(date);const dur=(d/60).toFixed(2)+'hrs';csvContent+=`"${r.date}","${r.inTime}","${r.outTime}","${dur}"\r\n`;html+=`<tr class='${isW?'weekend':''}'>${i===0?`<td rowspan='${rowspan}'>${r.date}</td>`:''}<td>${r.inTime}</td><td>${r.outTime}</td><td>${dur}</td></tr>`;}});}const totalWorkedDays=workedDates.size;const totalWorkedHours=(totalMin/60).toFixed(2);const s=new Date(fromGlobal),e=new Date(toGlobal);let expectedDays=0;for(let d=new Date(s);d<=e;d.setDate(d.getDate()+1)){if(!weekend.includes(d.getDay()))expectedDays++;}const expectedHours=(expectedDays*workHoursPerDay).toFixed(2);html+=`<tr><td>Total Days Worked:${totalWorkedDays}</td><td>Expected Days:${expectedDays}</td><td>Expected Hours:${expectedHours}</td><td>Worked Hours:${totalWorkedHours}</td></tr>`;html+=`</tbody></table><div style='display:flex;gap:8px;margin-top:8px;position:absolute;bottom:0;left:0;'><button id='btnCsv' class='primary' style='border:none;border-radius:10px;padding:8px 12px'>⬇️ Download(.csv)</button><button id='btnPrint' style='padding:8px 12px;border:1px solid #2a2f4a;border-radius:10px;background:#121528;color:#e8ecf3'>🖨️ Print Table</button></div>`;modalTitle.textContent=`${fromGlobal}to ${toGlobal}(Salary ${salaryGlobal})`;modalBody.innerHTML=html;document.getElementById('btnCsv').onclick=downloadCSV;document.getElementById('btnPrint').onclick=printTable;}function downloadCSV(){const blob=new Blob([csvContent],{type:'text/csv;charset=utf-8;'});const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download=`hours_${fromGlobal}_to_${toGlobal}.csv`;a.click();URL.revokeObjectURL(url);}function printTable(){const originalTable=modalBody.querySelector('table');const tableClone=originalTable.cloneNode(true);tableClone.querySelectorAll('tr.weekend').forEach(tr=>{tr.style.background='#c9134c';tr.style.color='#fff';tr.style.webkitPrintColorAdjust='exact';tr.style.printColorAdjust='exact';});const w=window.open('','','width=900,height=700');w.document.write(`<html><head><title>${fromGlobal}to ${toGlobal}|Time table</title><style>html,body{margin:10px;padding:0;font-family:Arial,sans-serif;}table{border-collapse:collapse;width:100%;}th,td{border:1px solid #333;padding:8px;text-align:left;}</style></head><body><h2 style="text-align:center">${fromGlobal}to ${toGlobal}</h2>${tableClone.outerHTML}</body></html>`);w.document.close();setTimeout(()=>{w.focus();w.print();w.close();},100);}function fieldsValidation(emailInput,passwordInput){const emailFilled=emailInput.value.trim()!=="";const passwordFilled=passwordInput.value.trim()!=="";if(!emailFilled &&!passwordFilled){loginBtn.disabled=true;registerBtn.disabled=true;resetBtn.disabled=true;}else if(emailFilled &&!passwordFilled){loginBtn.disabled=true;registerBtn.disabled=true;resetBtn.disabled=false;}else if(emailFilled && passwordFilled){loginBtn.disabled=false;registerBtn.disabled=false;resetBtn.disabled=false;}}fieldsValidation(emailInput,passwordInput);[emailInput,passwordInput].forEach(input=>{input.addEventListener("keydown",(e)=>{fieldsValidation(emailInput,passwordInput);if(e.key==="Enter"){if(input===emailInput && emailInput.value.trim()){passwordInput.focus();}else if(input===passwordInput && passwordInput.value.trim()&& emailInput.value.trim()){loginBtn.click();}else{loginBtn.click();}}});});loginBtn.onclick=async()=>{try{await loginEmail(emailInput.value.trim(),passwordInput.value);assign_email();toastMsg('Logged in!');}catch(e){handleFirebaseError(e);}};resetBtn.onclick=async()=>{try{await resetPassword(emailInput.value.trim());toastMsg('Reset password email sent!');}catch(e){handleFirebaseError(e);}};registerBtn.onclick=async()=>{try{await registerEmail(emailInput.value.trim(),passwordInput.value.trim());toastMsg('Registered!Please login.');assign_email();}catch(e){handleFirebaseError(e);}};logoutBtn.onclick=async()=>{try{await logout();toastMsg('Logged out');}catch(e){toastMsg('Logout failed');}};function handleFirebaseError(error){let msg='Something went wrong';switch(error.code){case 'auth/invalid-email':msg='Invalid email address';break;case 'auth/user-not-found':msg='No user found with this email';break;case 'auth/wrong-password':msg='Incorrect password';break;case 'auth/email-already-in-use':msg='Email is already registered';break;case 'auth/weak-password':msg='Password is too weak';break;case 'auth/invalid-login-credentials':msg='Invalid login credentials';break;default:msg=error.message||msg;}toastMsg(msg);}datePicker.onchange=()=>{if(datePicker.value)addDateEntry(datePicker.value);};rangeBtn.onclick=openRangeModal;closeRange.onclick=closeRangeModal;onAuthStateChanged(auth,async(user)=>{if(!user){uid=null;if(unsubUser)unsubUser();showAuth();return;}uid=user.uid;showApp();if(unsubUser)unsubUser();unsubUser=onSnapshot(userRef(),(snap)=>{const data=snap.exists()?snap.data():{};state.storage=data.storage||{};state.ongoing=data.ongoing||{};const today=new Date().toISOString().slice(0,10);ensureDay(today);renderAll();});const today=new Date().toISOString().slice(0,10);ensureDay(today);await pushStorage();});window.deleteTimeEntry=deleteTimeEntry;
